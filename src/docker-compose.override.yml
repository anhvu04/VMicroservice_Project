services:
  #basket-db
  basket-db:
    container_name: basket-db
    command: redis-server --requirepass ${BASKET_DB_PASSWORD}
    env_file:
      - .env
    restart: always
    ports:
      - "6380:6379"
    networks:
      - v-microservices
  
  #customer-db
  customer-db:
    container_name: customer-db
    environment:
      POSTGRES_USER: ${CUSTOMER_DB_USER}
      POSTGRES_PASSWORD: ${CUSTOMER_DB_PASSWORD}
      POSTGRES_DB: ${CUSTOMER_DB}
    env_file:
      - .env
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres-customer-data:/var/lib/postgresql/data
    networks:
      - v-microservices
        
  #identity-db
  identity-db:
    container_name: identity-db
    environment:
      MSSQL_SA_PASSWORD: ${IDENTITY_DB_PASSWORD}
      ACCEPT_EULA: "Y"
    env_file:
      - .env
    restart: always
    ports:
      - "1435:1433"
    volumes:
      - sqlserver-identity-data:/var/lib/sqlserver/data
    networks:
      - v-microservices
        
  #inventory-db
  inventory-db:
    container_name: inventory-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${INVENTORY_DB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${INVENTORY_DB_ROOT_PASSWORD}
    env_file:
      - .env
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo-inventory-data:/var/lib/mongo/data
    networks:
      - v-microservices
  
  #order-db
  order-db:
    container_name: order-db
    environment:
      MSSQL_SA_PASSWORD: ${ORDER_DB_PASSWORD}
      ACCEPT_EULA: "Y"
    env_file:
      - .env
    restart: always
    ports:
      - "1434:1433"
    volumes:
      -  sqlserver-order-data:/var/lib/sqlserver/data
    networks:
      - v-microservices
  
  #product-db
  product-db:
    container_name: product-db
    environment:
      MYSQL_ROOT_PASSWORD: ${PRODUCT_DB_ROOT_PASSWORD}
    env_file:
      - .env
    restart: always
    ports:
      - "3307:3306"
    volumes:
      - mysql-product-data:/var/lib/mysql
    networks:
      - v-microservices
  
  #rabbitmq
  rabbitmq:
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    env_file:
      - .env
    restart: always
    ports:
      - "5673:5672"     # RabbitMQ message broker port
      - "15673:15672"   # RabbitMQ management UI port
  
  #pgadmin
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    env_file:
      - .env
    restart: always
    ports:
      - "5051:80"
    volumes:
      - pgadmin-data:/root/.pgadmin
  
  #portainer
  portainer:
    container_name: portainer
    environment:
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    env_file:
      - .env
    restart: always
    ports:
      - "6767:8000"    #portainer port
      - "6768:9000"    #portainer UI port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
  
  #elasticsearch
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    env_file:
      - .env
    ports:
      - "5778:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  
  #kibana
  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:5778
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    env_file:
      - .env
    ports:
      - "5602:5601"
    depends_on:
      - elasticsearch
  
  #basket-api
  basket-api:
    container_name: basket-api
    environment:
      - ConnectionStrings__RedisConnection__Endpoints=${BASKET_API_ENDPOINT}
      - ConnectionStrings__RedisConnection__Port=${BASKET_API_PORT}
      - ConnectionStrings__RedisConnection__User=${BASKET_API_USER}
      - ConnectionStrings__RedisConnection__Password=${BASKET_API_PASSWORD}
    env_file:
      - .env
    depends_on:
      - basket-db
      - rabbitmq
    ports:
      - "6004:8080"
    networks:
      - v-microservices
    restart: always
  
  #customer-api
  customer-api:
    container_name: customer-api
    environment:
      - ConnectionStrings__DefaultConnection=${CUSTOMER_API_CONNECTION_STRING}
    env_file:
      - .env
    depends_on:
      - customer-db
    ports:
      - "6003:8080"
    networks:
      - v-microservices
    restart: always
  
  #identity-api
  identity-api:
    container_name: identity-api
    environment:
      - ConnectionStrings__DefaultConnection=${IDENTITY_API_CONNECTION_STRING}
    env_file:
      - .env
    depends_on:
      - identity-db
    ports:
      - "6001:8080"
    networks:
      - v-microservices
    restart: always
  
  #inventory-api
  inventory-api:
    container_name: inventory-api
    environment:
      - ConnectionStrings__MongoDbConnection__Host=${INVENTORY_API_HOST}
      - ConnectionStrings__MongoDbConnection__Port=${INVENTORY_API_PORT}
      - ConnectionStrings__MongoDbConnection__Username=${INVENTORY_API_USERNAME}
      - ConnectionStrings__MongoDbConnection__Password=${INVENTORY_API_PASSWORD}
      - ConnectionStrings__MongoDbConnection__DatabaseName=${INVENTORY_API_DATABASENAME}
    env_file:
      - .env
    depends_on:
      - inventory-db
    ports:
      - "6006:8080"
    networks:
      - v-microservices
    restart: always
  
  #order-api
  order-api:
    container_name: order-api
    environment:
      - ConnectionStrings__DefaultConnection=${ORDER_API_CONNECTION_STRING}
    env_file:
      - .env
    depends_on:
      - order-db
      - rabbitmq
    ports:
      - "6005:8080"
    networks:
      - v-microservices
    restart: always
  
  #product-api
  product-api:
    container_name: product-api
    environment:
      - ConnectionStrings__DefaultConnection=${PRODUCT_API_CONNECTION_STRING}
    env_file:
      - .env
    depends_on:
      - product-db
    ports:
      - "6002:8080"
    networks:
      - v-microservices
    restart: always
  
  
  #gateway-api
  gateway-api:
    container_name: gateway-api
    env_file:
      - .gateway.env
    depends_on:
      - basket-api
      - customer-api
      - identity-api
      - inventory-api
      - order-api
      - product-api
    ports:
      - "6007:8080"
    networks:
      - v-microservices
    restart: always
